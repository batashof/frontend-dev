/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  PaginatedRideServiceListList,
  V1RideServicesListParams
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1RideServicesListHook = () => {
        const v1RideServicesList = useCustomInstance<PaginatedRideServiceListList>();

        return useCallback((
    params?: V1RideServicesListParams,
 signal?: AbortSignal
) => {
        return v1RideServicesList(
          {url: `http://0.0.0.0:8000/api/v1/ride_services/`, method: 'GET',
        params, signal
    },
          );
        }, [v1RideServicesList])
      }
    

export const getV1RideServicesListQueryKey = (params?: V1RideServicesListParams,) => {
    return [`http://0.0.0.0:8000/api/v1/ride_services/`, ...(params ? [params]: [])] as const;
    }

    
export const useV1RideServicesListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>, TError = unknown>(params?: V1RideServicesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1RideServicesListQueryKey(params);

  const v1RideServicesList =  useV1RideServicesListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>> = ({ signal }) => v1RideServicesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1RideServicesListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>>
export type V1RideServicesListQueryError = unknown

export const useV1RideServicesList = <TData = Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>, TError = unknown>(
 params?: V1RideServicesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1RideServicesListHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1RideServicesListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  CreateFile,
  CreateFileRequest
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1FilesCreateHook = () => {
        const v1FilesCreate = useCustomInstance<CreateFile>();

        return useCallback((
    createFileRequest: CreateFileRequest,
 ) => {const formData = new FormData();
formData.append('file', createFileRequest.file)
formData.append('file_type', createFileRequest.file_type)
if(createFileRequest.name !== undefined && createFileRequest.name !== null) {
 formData.append('name', createFileRequest.name)
 }

        return v1FilesCreate(
          {url: `http://0.0.0.0:8000/api/v1/files/`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
          );
        }, [v1FilesCreate])
      }
    


export const useV1FilesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>, TError,{data: CreateFileRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>, TError,{data: CreateFileRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1FilesCreate =  useV1FilesCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>, {data: CreateFileRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1FilesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1FilesCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>>
    export type V1FilesCreateMutationBody = CreateFileRequest
    export type V1FilesCreateMutationError = unknown

    export const useV1FilesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>, TError,{data: CreateFileRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1FilesCreateHook>>>,
        TError,
        {data: CreateFileRequest},
        TContext
      > => {

      const mutationOptions = useV1FilesCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1FilesDestroyHook = () => {
        const v1FilesDestroy = useCustomInstance<void>();

        return useCallback((
    uuid: string,
 ) => {
        return v1FilesDestroy(
          {url: `http://0.0.0.0:8000/api/v1/files/${uuid}/`, method: 'DELETE'
    },
          );
        }, [v1FilesDestroy])
      }
    


export const useV1FilesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>, TError,{uuid: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1FilesDestroy =  useV1FilesDestroyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  v1FilesDestroy(uuid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1FilesDestroyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>>
    
    export type V1FilesDestroyMutationError = unknown

    export const useV1FilesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1FilesDestroyHook>>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = useV1FilesDestroyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
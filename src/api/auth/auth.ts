/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  BlackListToken,
  BlackListTokenRequest,
  TokenObtainPairRequest,
  TokenRefresh,
  TokenRefreshRequest
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1AuthLogoutCreateHook = () => {
        const v1AuthLogoutCreate = useCustomInstance<BlackListToken>();

        return useCallback((
    blackListTokenRequest: BlackListTokenRequest,
 ) => {
        return v1AuthLogoutCreate(
          {url: `http://0.0.0.0:8000/api/v1/auth/logout/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: blackListTokenRequest
    },
          );
        }, [v1AuthLogoutCreate])
      }
    


export const useV1AuthLogoutCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>, TError,{data: BlackListTokenRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>, TError,{data: BlackListTokenRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1AuthLogoutCreate =  useV1AuthLogoutCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>, {data: BlackListTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1AuthLogoutCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1AuthLogoutCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>>
    export type V1AuthLogoutCreateMutationBody = BlackListTokenRequest
    export type V1AuthLogoutCreateMutationError = unknown

    export const useV1AuthLogoutCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>, TError,{data: BlackListTokenRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1AuthLogoutCreateHook>>>,
        TError,
        {data: BlackListTokenRequest},
        TContext
      > => {

      const mutationOptions = useV1AuthLogoutCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const useV1AuthSignInCreateHook = () => {
        const v1AuthSignInCreate = useCustomInstance<void>();

        return useCallback((
    tokenObtainPairRequest: TokenObtainPairRequest,
 ) => {
        return v1AuthSignInCreate(
          {url: `http://0.0.0.0:8000/api/v1/auth/sign_in/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPairRequest
    },
          );
        }, [v1AuthSignInCreate])
      }
    


export const useV1AuthSignInCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>, TError,{data: TokenObtainPairRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>, TError,{data: TokenObtainPairRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1AuthSignInCreate =  useV1AuthSignInCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>, {data: TokenObtainPairRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1AuthSignInCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1AuthSignInCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>>
    export type V1AuthSignInCreateMutationBody = TokenObtainPairRequest
    export type V1AuthSignInCreateMutationError = unknown

    export const useV1AuthSignInCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>, TError,{data: TokenObtainPairRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1AuthSignInCreateHook>>>,
        TError,
        {data: TokenObtainPairRequest},
        TContext
      > => {

      const mutationOptions = useV1AuthSignInCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const useV1AuthTokenRefreshCreateHook = () => {
        const v1AuthTokenRefreshCreate = useCustomInstance<TokenRefresh>();

        return useCallback((
    tokenRefreshRequest: TokenRefreshRequest,
 ) => {
        return v1AuthTokenRefreshCreate(
          {url: `http://0.0.0.0:8000/api/v1/auth/token/refresh/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefreshRequest
    },
          );
        }, [v1AuthTokenRefreshCreate])
      }
    


export const useV1AuthTokenRefreshCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>, TError,{data: TokenRefreshRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>, TError,{data: TokenRefreshRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1AuthTokenRefreshCreate =  useV1AuthTokenRefreshCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>, {data: TokenRefreshRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1AuthTokenRefreshCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1AuthTokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>>
    export type V1AuthTokenRefreshCreateMutationBody = TokenRefreshRequest
    export type V1AuthTokenRefreshCreateMutationError = unknown

    export const useV1AuthTokenRefreshCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>, TError,{data: TokenRefreshRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1AuthTokenRefreshCreateHook>>>,
        TError,
        {data: TokenRefreshRequest},
        TContext
      > => {

      const mutationOptions = useV1AuthTokenRefreshCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  DriverDetails,
  DriverDetailsRequest,
  PaginatedDriverListList,
  PatchedDriverDetailsRequest,
  V1DriversListParams
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1DriversListHook = () => {
        const v1DriversList = useCustomInstance<PaginatedDriverListList>();

        return useCallback((
    params?: V1DriversListParams,
 signal?: AbortSignal
) => {
        return v1DriversList(
          {url: `http://0.0.0.0:8000/api/v1/drivers/`, method: 'GET',
        params, signal
    },
          );
        }, [v1DriversList])
      }
    

export const getV1DriversListQueryKey = (params?: V1DriversListParams,) => {
    return [`http://0.0.0.0:8000/api/v1/drivers/`, ...(params ? [params]: [])] as const;
    }

    
export const useV1DriversListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>, TError = unknown>(params?: V1DriversListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1DriversListQueryKey(params);

  const v1DriversList =  useV1DriversListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>> = ({ signal }) => v1DriversList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1DriversListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>>
export type V1DriversListQueryError = unknown

export const useV1DriversList = <TData = Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>, TError = unknown>(
 params?: V1DriversListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversListHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1DriversListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useV1DriversCreateHook = () => {
        const v1DriversCreate = useCustomInstance<DriverDetails>();

        return useCallback((
    driverDetailsRequest: DriverDetailsRequest,
 ) => {
        return v1DriversCreate(
          {url: `http://0.0.0.0:8000/api/v1/drivers/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: driverDetailsRequest
    },
          );
        }, [v1DriversCreate])
      }
    


export const useV1DriversCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>, TError,{data: DriverDetailsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>, TError,{data: DriverDetailsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1DriversCreate =  useV1DriversCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>, {data: DriverDetailsRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1DriversCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1DriversCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>>
    export type V1DriversCreateMutationBody = DriverDetailsRequest
    export type V1DriversCreateMutationError = unknown

    export const useV1DriversCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>, TError,{data: DriverDetailsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1DriversCreateHook>>>,
        TError,
        {data: DriverDetailsRequest},
        TContext
      > => {

      const mutationOptions = useV1DriversCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1DriversRetrieveHook = () => {
        const v1DriversRetrieve = useCustomInstance<DriverDetails>();

        return useCallback((
    uuid: string,
 signal?: AbortSignal
) => {
        return v1DriversRetrieve(
          {url: `http://0.0.0.0:8000/api/v1/drivers/${uuid}/`, method: 'GET', signal
    },
          );
        }, [v1DriversRetrieve])
      }
    

export const getV1DriversRetrieveQueryKey = (uuid: string,) => {
    return [`http://0.0.0.0:8000/api/v1/drivers/${uuid}/`] as const;
    }

    
export const useV1DriversRetrieveQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>, TError = unknown>(uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1DriversRetrieveQueryKey(uuid);

  const v1DriversRetrieve =  useV1DriversRetrieveHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>> = ({ signal }) => v1DriversRetrieve(uuid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1DriversRetrieveQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>>
export type V1DriversRetrieveQueryError = unknown

export const useV1DriversRetrieve = <TData = Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>, TError = unknown>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversRetrieveHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1DriversRetrieveQueryOptions(uuid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useV1DriversUpdateHook = () => {
        const v1DriversUpdate = useCustomInstance<DriverDetails>();

        return useCallback((
    uuid: string,
    driverDetailsRequest: DriverDetailsRequest,
 ) => {
        return v1DriversUpdate(
          {url: `http://0.0.0.0:8000/api/v1/drivers/${uuid}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: driverDetailsRequest
    },
          );
        }, [v1DriversUpdate])
      }
    


export const useV1DriversUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>, TError,{uuid: string;data: DriverDetailsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>, TError,{uuid: string;data: DriverDetailsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1DriversUpdate =  useV1DriversUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>, {uuid: string;data: DriverDetailsRequest}> = (props) => {
          const {uuid,data} = props ?? {};

          return  v1DriversUpdate(uuid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1DriversUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>>
    export type V1DriversUpdateMutationBody = DriverDetailsRequest
    export type V1DriversUpdateMutationError = unknown

    export const useV1DriversUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>, TError,{uuid: string;data: DriverDetailsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1DriversUpdateHook>>>,
        TError,
        {uuid: string;data: DriverDetailsRequest},
        TContext
      > => {

      const mutationOptions = useV1DriversUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1DriversPartialUpdateHook = () => {
        const v1DriversPartialUpdate = useCustomInstance<DriverDetails>();

        return useCallback((
    uuid: string,
    patchedDriverDetailsRequest: PatchedDriverDetailsRequest,
 ) => {
        return v1DriversPartialUpdate(
          {url: `http://0.0.0.0:8000/api/v1/drivers/${uuid}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedDriverDetailsRequest
    },
          );
        }, [v1DriversPartialUpdate])
      }
    


export const useV1DriversPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>, TError,{uuid: string;data: PatchedDriverDetailsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>, TError,{uuid: string;data: PatchedDriverDetailsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1DriversPartialUpdate =  useV1DriversPartialUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>, {uuid: string;data: PatchedDriverDetailsRequest}> = (props) => {
          const {uuid,data} = props ?? {};

          return  v1DriversPartialUpdate(uuid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1DriversPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>>
    export type V1DriversPartialUpdateMutationBody = PatchedDriverDetailsRequest
    export type V1DriversPartialUpdateMutationError = unknown

    export const useV1DriversPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>, TError,{uuid: string;data: PatchedDriverDetailsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1DriversPartialUpdateHook>>>,
        TError,
        {uuid: string;data: PatchedDriverDetailsRequest},
        TContext
      > => {

      const mutationOptions = useV1DriversPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1DriversDestroyHook = () => {
        const v1DriversDestroy = useCustomInstance<void>();

        return useCallback((
    uuid: string,
 ) => {
        return v1DriversDestroy(
          {url: `http://0.0.0.0:8000/api/v1/drivers/${uuid}/`, method: 'DELETE'
    },
          );
        }, [v1DriversDestroy])
      }
    


export const useV1DriversDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>, TError,{uuid: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1DriversDestroy =  useV1DriversDestroyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  v1DriversDestroy(uuid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1DriversDestroyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>>
    
    export type V1DriversDestroyMutationError = unknown

    export const useV1DriversDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1DriversDestroyHook>>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = useV1DriversDestroyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  User
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1UsersCurrentRetrieveHook = () => {
        const v1UsersCurrentRetrieve = useCustomInstance<User>();

        return useCallback((
    
 signal?: AbortSignal
) => {
        return v1UsersCurrentRetrieve(
          {url: `http://0.0.0.0:8000/api/v1/users/current/`, method: 'GET', signal
    },
          );
        }, [v1UsersCurrentRetrieve])
      }
    

export const getV1UsersCurrentRetrieveQueryKey = () => {
    return [`http://0.0.0.0:8000/api/v1/users/current/`] as const;
    }

    
export const useV1UsersCurrentRetrieveQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1UsersCurrentRetrieveQueryKey();

  const v1UsersCurrentRetrieve =  useV1UsersCurrentRetrieveHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>> = ({ signal }) => v1UsersCurrentRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1UsersCurrentRetrieveQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>>
export type V1UsersCurrentRetrieveQueryError = unknown

export const useV1UsersCurrentRetrieve = <TData = Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1UsersCurrentRetrieveHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1UsersCurrentRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
export type V1VehiclesListParams = {
  designated_drivers__icontains?: string;
  /**
   * Multiple values may be separated by commas.
   */
  insurance_expiry__range?: string[];
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * Multiple values may be separated by commas.
   */
  maintenance_expiry__range?: string[];
  number_plate__icontains?: string;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  owner__icontains?: string;
  /**
   * Multiple values may be separated by commas.
   */
  status__in?: string[];
};

export type V1RideServicesListParams = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type V1DriversListParams = {
  assigned_vehicles__icontains?: string;
  email__icontains?: string;
  full_name__icontains?: string;
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  /**
   * Which field to use when ordering the results.
   */
  ordering?: string;
  /**
   * Multiple values may be separated by commas.
   */
  status__in?: string;
  /**
   * Multiple values may be separated by commas.
   */
  work_permit_expiry__range?: string;
};

/**
 * * `available` - available
 * `in_use` - in_use
 * `under_maintenance` - under_maintenance
 * `broken` - broken
 * `sold` - sold
 * `reserved` - reserved
 */
export type VehicleListRequestStatus =
  (typeof VehicleListRequestStatus)[keyof typeof VehicleListRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VehicleListRequestStatus = {
  available: 'available',
  in_use: 'in_use',
  under_maintenance: 'under_maintenance',
  broken: 'broken',
  sold: 'sold',
  reserved: 'reserved'
} as const;

export interface VehicleListRequest {
  designated_drivers: DesignatedDriverListRequest[];
  /** @nullable */
  insurance_expiry?: string | null;
  /** @nullable */
  maintenance_expiry?: string | null;
  /**
   * @minLength 1
   * @maxLength 10
   */
  number_plate: string;
  /**
   * @minLength 2
   * @maxLength 255
   */
  owner: string;
  /** * `available` - available
   * `in_use` - in_use
   * `under_maintenance` - under_maintenance
   * `broken` - broken
   * `sold` - sold
   * `reserved` - reserved */
  status: VehicleListRequestStatus;
}

/**
 * * `available` - available
 * `in_use` - in_use
 * `under_maintenance` - under_maintenance
 * `broken` - broken
 * `sold` - sold
 * `reserved` - reserved
 */
export type VehicleListStatus = (typeof VehicleListStatus)[keyof typeof VehicleListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VehicleListStatus = {
  available: 'available',
  in_use: 'in_use',
  under_maintenance: 'under_maintenance',
  broken: 'broken',
  sold: 'sold',
  reserved: 'reserved'
} as const;

export interface VehicleList {
  readonly created_at: string;
  designated_drivers: DesignatedDriverList[];
  readonly files: readonly string[];
  /** @nullable */
  insurance_expiry?: string | null;
  /** @nullable */
  maintenance_expiry?: string | null;
  /** @maxLength 10 */
  number_plate: string;
  /**
   * @minLength 2
   * @maxLength 255
   */
  owner: string;
  /** * `available` - available
   * `in_use` - in_use
   * `under_maintenance` - under_maintenance
   * `broken` - broken
   * `sold` - sold
   * `reserved` - reserved */
  status: VehicleListStatus;
  readonly tenant: Tenant;
  readonly updated_at: string;
  readonly uuid: string;
}

/**
 * * `available` - available
 * `in_use` - in_use
 * `under_maintenance` - under_maintenance
 * `broken` - broken
 * `sold` - sold
 * `reserved` - reserved
 */
export type VehicleDetailsRequestStatus =
  (typeof VehicleDetailsRequestStatus)[keyof typeof VehicleDetailsRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VehicleDetailsRequestStatus = {
  available: 'available',
  in_use: 'in_use',
  under_maintenance: 'under_maintenance',
  broken: 'broken',
  sold: 'sold',
  reserved: 'reserved'
} as const;

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface VehicleDetailsRequest {
  designated_drivers: DesignatedDriverCreateUpdateRequest[];
  file_ids: string[];
  /** @nullable */
  insurance_expiry?: string | null;
  /** @nullable */
  maintenance_expiry?: string | null;
  /**
   * @minLength 1
   * @maxLength 10
   */
  number_plate: string;
  /**
   * @minLength 2
   * @maxLength 255
   */
  owner: string;
  /** * `available` - available
   * `in_use` - in_use
   * `under_maintenance` - under_maintenance
   * `broken` - broken
   * `sold` - sold
   * `reserved` - reserved */
  status: VehicleDetailsRequestStatus;
}

/**
 * * `available` - available
 * `in_use` - in_use
 * `under_maintenance` - under_maintenance
 * `broken` - broken
 * `sold` - sold
 * `reserved` - reserved
 */
export type VehicleDetailsStatus = (typeof VehicleDetailsStatus)[keyof typeof VehicleDetailsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VehicleDetailsStatus = {
  available: 'available',
  in_use: 'in_use',
  under_maintenance: 'under_maintenance',
  broken: 'broken',
  sold: 'sold',
  reserved: 'reserved'
} as const;

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface VehicleDetails {
  readonly created_at: string;
  designated_drivers: DesignatedDriverCreateUpdate[];
  readonly files: readonly string[];
  /** @nullable */
  insurance_expiry?: string | null;
  /** @nullable */
  maintenance_expiry?: string | null;
  /** @maxLength 10 */
  number_plate: string;
  /**
   * @minLength 2
   * @maxLength 255
   */
  owner: string;
  /** * `available` - available
   * `in_use` - in_use
   * `under_maintenance` - under_maintenance
   * `broken` - broken
   * `sold` - sold
   * `reserved` - reserved */
  status: VehicleDetailsStatus;
  readonly tenant: Tenant;
  readonly updated_at: string;
  readonly uuid: string;
}

/**
 * * `driver` - driver
 * `manager` - manager
 * `editor` - editor
 */
export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  driver: 'driver',
  manager: 'manager',
  editor: 'editor'
} as const;

export interface User {
  /** @maxLength 320 */
  email: string;
  /** @maxLength 100 */
  first_name?: string;
  full_name: string;
  is_active?: boolean;
  /** @maxLength 100 */
  last_name?: string;
  /** * `driver` - driver
   * `manager` - manager
   * `editor` - editor */
  role: UserRole;
  /** @nullable */
  tenant?: string | null;
  readonly uuid: string;
}

export interface TokenRefreshRequest {
  /** @minLength 1 */
  refresh: string;
}

export interface TokenRefresh {
  readonly access: string;
  refresh: string;
}

export interface TokenObtainPairRequest {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  password: string;
}

export interface TenantRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  contact_email: string;
  /** @maxLength 255 */
  contact_name?: string;
  /** @maxLength 20 */
  contact_phone?: string;
  /** @nullable */
  license?: string | null;
  /** @nullable */
  logo?: string | null;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

export interface Tenant {
  /** @maxLength 255 */
  contact_email: string;
  /** @maxLength 255 */
  contact_name?: string;
  /** @maxLength 20 */
  contact_phone?: string;
  readonly created_at: string;
  /** @nullable */
  license?: string | null;
  /** @nullable */
  logo?: string | null;
  /** @maxLength 255 */
  name: string;
  readonly updated_at: string;
  readonly uuid: string;
}

export interface RideServiceList {
  /** @maxLength 50 */
  name: string;
  readonly uuid: string;
}

/**
 * * `available` - available
 * `in_use` - in_use
 * `under_maintenance` - under_maintenance
 * `broken` - broken
 * `sold` - sold
 * `reserved` - reserved
 */
export type PatchedVehicleDetailsRequestStatus =
  (typeof PatchedVehicleDetailsRequestStatus)[keyof typeof PatchedVehicleDetailsRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchedVehicleDetailsRequestStatus = {
  available: 'available',
  in_use: 'in_use',
  under_maintenance: 'under_maintenance',
  broken: 'broken',
  sold: 'sold',
  reserved: 'reserved'
} as const;

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface PatchedVehicleDetailsRequest {
  designated_drivers?: DesignatedDriverCreateUpdateRequest[];
  file_ids?: string[];
  /** @nullable */
  insurance_expiry?: string | null;
  /** @nullable */
  maintenance_expiry?: string | null;
  /**
   * @minLength 1
   * @maxLength 10
   */
  number_plate?: string;
  /**
   * @minLength 2
   * @maxLength 255
   */
  owner?: string;
  /** * `available` - available
   * `in_use` - in_use
   * `under_maintenance` - under_maintenance
   * `broken` - broken
   * `sold` - sold
   * `reserved` - reserved */
  status?: PatchedVehicleDetailsRequestStatus;
}

/**
 * * `active` - active
 * `terminated` - terminated
 * `suspended` - suspended
 * `awaiting_assignment` - awaiting assignment
 */
export type PatchedDriverDetailsRequestStatus =
  (typeof PatchedDriverDetailsRequestStatus)[keyof typeof PatchedDriverDetailsRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchedDriverDetailsRequestStatus = {
  active: 'active',
  terminated: 'terminated',
  suspended: 'suspended',
  awaiting_assignment: 'awaiting_assignment'
} as const;

export interface PaginatedVehicleListList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: VehicleList[];
}

export interface PaginatedRideServiceListList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: RideServiceList[];
}

export interface PaginatedDriverListList {
  count: number;
  /** @nullable */
  next?: string | null;
  /** @nullable */
  previous?: string | null;
  results: DriverList[];
}

export interface FuelCardRequest {
  /**
   * @minLength 5
   * @maxLength 40
   */
  card_number: string;
  uuid?: string;
}

export interface FuelCard {
  /**
   * @minLength 5
   * @maxLength 40
   */
  card_number: string;
  readonly created_at: string;
  readonly updated_at: string;
  uuid?: string;
}

/**
 * * `export file` - export file
 * `tenant_logo` - tenant logo
 * `driver_avatar` - driver avatar
 * `driver_file` - driver file
 * `vehicle_file` - vehicle file
 */
export type FileDetailsRequestFileType =
  (typeof FileDetailsRequestFileType)[keyof typeof FileDetailsRequestFileType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FileDetailsRequestFileType = {
  export_file: 'export file',
  tenant_logo: 'tenant_logo',
  driver_avatar: 'driver_avatar',
  driver_file: 'driver_file',
  vehicle_file: 'vehicle_file'
} as const;

export interface FileDetailsRequest {
  file: Blob;
  /** * `export file` - export file
   * `tenant_logo` - tenant logo
   * `driver_avatar` - driver avatar
   * `driver_file` - driver file
   * `vehicle_file` - vehicle file */
  file_type: FileDetailsRequestFileType;
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
}

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface PatchedDriverDetailsRequest {
  /**
   * @maxLength 500
   * @nullable
   */
  additional_info?: string | null;
  /** @minLength 5 */
  address?: string;
  assigned_vehicles?: AssignedVehicleCreateUpdateRequest[];
  avatar?: FileDetailsRequest;
  /** @nullable */
  avatar_id?: string | null;
  /**
   * @minLength 10
   * @maxLength 34
   * @nullable
   */
  bank_account?: string | null;
  date_of_birth?: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  email?: string;
  externals?: DriverExternalRequest[];
  file_ids?: string[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  first_name?: string;
  /** @pattern ^-?\d{0,3}(?:\.\d{0,2})?$ */
  fleet_commission?: string;
  fuel_cards?: FuelCardRequest[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  last_name?: string;
  /**
   * @minLength 6
   * @maxLength 12
   */
  passport_number?: string;
  /**
   * @minLength 11
   * @maxLength 11
   */
  pesel?: string;
  /**
   * @minLength 1
   * @maxLength 20
   */
  phone?: string;
  /** * `active` - active
   * `terminated` - terminated
   * `suspended` - suspended
   * `awaiting_assignment` - awaiting assignment */
  status?: PatchedDriverDetailsRequestStatus;
  /** @nullable */
  termination_date?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  vat?: string | null;
  /** @nullable */
  work_permit_expiry?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_monthly?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_weekly?: string | null;
}

/**
 * * `export file` - export file
 * `tenant_logo` - tenant logo
 * `driver_avatar` - driver avatar
 * `driver_file` - driver file
 * `vehicle_file` - vehicle file
 */
export type FileDetailsFileType = (typeof FileDetailsFileType)[keyof typeof FileDetailsFileType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FileDetailsFileType = {
  export_file: 'export file',
  tenant_logo: 'tenant_logo',
  driver_avatar: 'driver_avatar',
  driver_file: 'driver_file',
  vehicle_file: 'vehicle_file'
} as const;

export interface FileDetails {
  file: string;
  readonly file_name: string;
  /** * `export file` - export file
   * `tenant_logo` - tenant logo
   * `driver_avatar` - driver avatar
   * `driver_file` - driver file
   * `vehicle_file` - vehicle file */
  file_type: FileDetailsFileType;
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
  readonly uuid: string;
}

/**
 * * `active` - active
 * `terminated` - terminated
 * `suspended` - suspended
 * `awaiting_assignment` - awaiting assignment
 */
export type DriverListStatus = (typeof DriverListStatus)[keyof typeof DriverListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DriverListStatus = {
  active: 'active',
  terminated: 'terminated',
  suspended: 'suspended',
  awaiting_assignment: 'awaiting_assignment'
} as const;

export interface DriverList {
  /**
   * @maxLength 500
   * @nullable
   */
  additional_info?: string | null;
  /** @minLength 5 */
  address?: string;
  assigned_vehicles: AssignedVehicleList[];
  avatar: FileDetails;
  /**
   * @minLength 10
   * @maxLength 34
   * @nullable
   */
  bank_account?: string | null;
  readonly created_at: string;
  date_of_birth: string;
  /** @maxLength 255 */
  email: string;
  readonly files: readonly string[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  first_name?: string;
  /** @pattern ^-?\d{0,3}(?:\.\d{0,2})?$ */
  fleet_commission: string;
  readonly full_name: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  last_name?: string;
  /**
   * @minLength 6
   * @maxLength 12
   */
  passport_number: string;
  /**
   * @minLength 11
   * @maxLength 11
   */
  pesel: string;
  /** @maxLength 20 */
  phone: string;
  /** * `active` - active
   * `terminated` - terminated
   * `suspended` - suspended
   * `awaiting_assignment` - awaiting assignment */
  status: DriverListStatus;
  readonly tenant: Tenant;
  /** @nullable */
  termination_date?: string | null;
  readonly updated_at: string;
  readonly uuid: string;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  vat?: string | null;
  /** @nullable */
  work_permit_expiry?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_monthly?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_weekly?: string | null;
}

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface DriverExternalRequest {
  /**
   * @minLength 5
   * @maxLength 40
   */
  external_id: string;
  ride_service: string;
  uuid?: string;
}

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface DriverExternal {
  readonly created_at: string;
  /**
   * @minLength 5
   * @maxLength 40
   */
  external_id: string;
  ride_service: string;
  readonly service_name: string;
  readonly updated_at: string;
  uuid?: string;
}

/**
 * * `active` - active
 * `terminated` - terminated
 * `suspended` - suspended
 * `awaiting_assignment` - awaiting assignment
 */
export type DriverDetailsRequestStatus =
  (typeof DriverDetailsRequestStatus)[keyof typeof DriverDetailsRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DriverDetailsRequestStatus = {
  active: 'active',
  terminated: 'terminated',
  suspended: 'suspended',
  awaiting_assignment: 'awaiting_assignment'
} as const;

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface DriverDetailsRequest {
  /**
   * @maxLength 500
   * @nullable
   */
  additional_info?: string | null;
  /** @minLength 5 */
  address?: string;
  assigned_vehicles: AssignedVehicleCreateUpdateRequest[];
  avatar: FileDetailsRequest;
  /** @nullable */
  avatar_id: string | null;
  /**
   * @minLength 10
   * @maxLength 34
   * @nullable
   */
  bank_account?: string | null;
  date_of_birth: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  email: string;
  externals: DriverExternalRequest[];
  file_ids: string[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  first_name?: string;
  /** @pattern ^-?\d{0,3}(?:\.\d{0,2})?$ */
  fleet_commission: string;
  fuel_cards: FuelCardRequest[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  last_name?: string;
  /**
   * @minLength 6
   * @maxLength 12
   */
  passport_number: string;
  /**
   * @minLength 11
   * @maxLength 11
   */
  pesel: string;
  /**
   * @minLength 1
   * @maxLength 20
   */
  phone: string;
  /** * `active` - active
   * `terminated` - terminated
   * `suspended` - suspended
   * `awaiting_assignment` - awaiting assignment */
  status: DriverDetailsRequestStatus;
  /** @nullable */
  termination_date?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  vat?: string | null;
  /** @nullable */
  work_permit_expiry?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_monthly?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_weekly?: string | null;
}

/**
 * * `active` - active
 * `terminated` - terminated
 * `suspended` - suspended
 * `awaiting_assignment` - awaiting assignment
 */
export type DriverDetailsStatus = (typeof DriverDetailsStatus)[keyof typeof DriverDetailsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DriverDetailsStatus = {
  active: 'active',
  terminated: 'terminated',
  suspended: 'suspended',
  awaiting_assignment: 'awaiting_assignment'
} as const;

/**
 * Add validator class logic.
The validator class will be called in `validate` method of Serializer.

Recommended to use validator classes inherited from BaseValidator.

Example:

class MySerializer(ValidatorMixin, serializers.Serializer):
    class Meta:
        ...
        validator_class = MyValidator
        ...
 */
export interface DriverDetails {
  /**
   * @maxLength 500
   * @nullable
   */
  additional_info?: string | null;
  /** @minLength 5 */
  address?: string;
  assigned_vehicles: AssignedVehicleCreateUpdate[];
  avatar: FileDetails;
  /**
   * @minLength 10
   * @maxLength 34
   * @nullable
   */
  bank_account?: string | null;
  readonly created_at: string;
  date_of_birth: string;
  /** @maxLength 255 */
  email: string;
  externals: DriverExternal[];
  readonly files: readonly string[];
  /**
   * @minLength 2
   * @maxLength 100
   */
  first_name?: string;
  /** @pattern ^-?\d{0,3}(?:\.\d{0,2})?$ */
  fleet_commission: string;
  fuel_cards: FuelCard[];
  readonly full_name: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  last_name?: string;
  /**
   * @minLength 6
   * @maxLength 12
   */
  passport_number: string;
  /**
   * @minLength 11
   * @maxLength 11
   */
  pesel: string;
  /** @maxLength 20 */
  phone: string;
  /** * `active` - active
   * `terminated` - terminated
   * `suspended` - suspended
   * `awaiting_assignment` - awaiting assignment */
  status: DriverDetailsStatus;
  readonly tenant: Tenant;
  /** @nullable */
  termination_date?: string | null;
  readonly updated_at: string;
  readonly uuid: string;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  vat?: string | null;
  /** @nullable */
  work_permit_expiry?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_monthly?: string | null;
  /**
   * @nullable
   * @pattern ^-?\d{0,3}(?:\.\d{0,2})?$
   */
  zus_weekly?: string | null;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type DesignatedDriverListRequestStatus =
  (typeof DesignatedDriverListRequestStatus)[keyof typeof DesignatedDriverListRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DesignatedDriverListRequestStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface DesignatedDriverListRequest {
  /** @minLength 1 */
  full_name: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: DesignatedDriverListRequestStatus;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type DesignatedDriverListStatus =
  (typeof DesignatedDriverListStatus)[keyof typeof DesignatedDriverListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DesignatedDriverListStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface DesignatedDriverList {
  readonly driver_id: string;
  full_name: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: DesignatedDriverListStatus;
  readonly uuid: string;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type DesignatedDriverCreateUpdateRequestStatus =
  (typeof DesignatedDriverCreateUpdateRequestStatus)[keyof typeof DesignatedDriverCreateUpdateRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DesignatedDriverCreateUpdateRequestStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface DesignatedDriverCreateUpdateRequest {
  driver: string;
  end_date: string;
  is_rental_paid_by_driver?: boolean;
  /** @pattern ^-?\d{0,8}(?:\.\d{0,2})?$ */
  rental_cost: string;
  start_date: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: DesignatedDriverCreateUpdateRequestStatus;
  uuid?: string;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type DesignatedDriverCreateUpdateStatus =
  (typeof DesignatedDriverCreateUpdateStatus)[keyof typeof DesignatedDriverCreateUpdateStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DesignatedDriverCreateUpdateStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface DesignatedDriverCreateUpdate {
  readonly created_at: string;
  driver: string;
  end_date: string;
  is_rental_paid_by_driver?: boolean;
  /** @pattern ^-?\d{0,8}(?:\.\d{0,2})?$ */
  rental_cost: string;
  start_date: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: DesignatedDriverCreateUpdateStatus;
  readonly updated_at: string;
  uuid?: string;
}

/**
 * * `export file` - export file
 * `tenant_logo` - tenant logo
 * `driver_avatar` - driver avatar
 * `driver_file` - driver file
 * `vehicle_file` - vehicle file
 */
export type CreateFileRequestFileType =
  (typeof CreateFileRequestFileType)[keyof typeof CreateFileRequestFileType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFileRequestFileType = {
  export_file: 'export file',
  tenant_logo: 'tenant_logo',
  driver_avatar: 'driver_avatar',
  driver_file: 'driver_file',
  vehicle_file: 'vehicle_file'
} as const;

export interface CreateFileRequest {
  file: Blob;
  /** * `export file` - export file
   * `tenant_logo` - tenant logo
   * `driver_avatar` - driver avatar
   * `driver_file` - driver file
   * `vehicle_file` - vehicle file */
  file_type: CreateFileRequestFileType;
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
}

/**
 * * `export file` - export file
 * `tenant_logo` - tenant logo
 * `driver_avatar` - driver avatar
 * `driver_file` - driver file
 * `vehicle_file` - vehicle file
 */
export type CreateFileFileType = (typeof CreateFileFileType)[keyof typeof CreateFileFileType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFileFileType = {
  export_file: 'export file',
  tenant_logo: 'tenant_logo',
  driver_avatar: 'driver_avatar',
  driver_file: 'driver_file',
  vehicle_file: 'vehicle_file'
} as const;

export interface CreateFile {
  file: string;
  readonly file_name: string;
  /** * `export file` - export file
   * `tenant_logo` - tenant logo
   * `driver_avatar` - driver avatar
   * `driver_file` - driver file
   * `vehicle_file` - vehicle file */
  file_type: CreateFileFileType;
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
  readonly uuid: string;
}

export interface BlackListTokenRequest {
  /** @minLength 1 */
  refresh: string;
}

export interface BlackListToken {
  refresh: string;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type AssignedVehicleListStatus =
  (typeof AssignedVehicleListStatus)[keyof typeof AssignedVehicleListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignedVehicleListStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface AssignedVehicleList {
  number_plate: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: AssignedVehicleListStatus;
  readonly vehicle_id: string;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type AssignedVehicleCreateUpdateRequestStatus =
  (typeof AssignedVehicleCreateUpdateRequestStatus)[keyof typeof AssignedVehicleCreateUpdateRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignedVehicleCreateUpdateRequestStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface AssignedVehicleCreateUpdateRequest {
  end_date: string;
  is_rental_paid_by_driver?: boolean;
  /** @pattern ^-?\d{0,8}(?:\.\d{0,2})?$ */
  rental_cost: string;
  start_date: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: AssignedVehicleCreateUpdateRequestStatus;
  uuid?: string;
  vehicle: string;
}

/**
 * * `reserved` - reserved
 * `rent` - rent
 * `ended` - ended
 */
export type AssignedVehicleCreateUpdateStatus =
  (typeof AssignedVehicleCreateUpdateStatus)[keyof typeof AssignedVehicleCreateUpdateStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignedVehicleCreateUpdateStatus = {
  reserved: 'reserved',
  rent: 'rent',
  ended: 'ended'
} as const;

export interface AssignedVehicleCreateUpdate {
  readonly created_at: string;
  end_date: string;
  is_rental_paid_by_driver?: boolean;
  /** @pattern ^-?\d{0,8}(?:\.\d{0,2})?$ */
  rental_cost: string;
  start_date: string;
  /** * `reserved` - reserved
   * `rent` - rent
   * `ended` - ended */
  status: AssignedVehicleCreateUpdateStatus;
  readonly updated_at: string;
  uuid?: string;
  vehicle: string;
}

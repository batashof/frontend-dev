/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Rideo API
 * Rideo project backend REST API
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import {
  useCallback
} from 'react'
import type {
  PaginatedVehicleListList,
  PatchedVehicleDetailsRequest,
  V1VehiclesListParams,
  VehicleDetails,
  VehicleDetailsRequest,
  VehicleList,
  VehicleListRequest
} from '../api.schemas'
import { useCustomInstance } from '.././use-custom-instance';



export const useV1VehiclesListHook = () => {
        const v1VehiclesList = useCustomInstance<PaginatedVehicleListList>();

        return useCallback((
    params?: V1VehiclesListParams,
 signal?: AbortSignal
) => {
        return v1VehiclesList(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/`, method: 'GET',
        params, signal
    },
          );
        }, [v1VehiclesList])
      }
    

export const getV1VehiclesListQueryKey = (params?: V1VehiclesListParams,) => {
    return [`http://0.0.0.0:8000/api/v1/vehicles/`, ...(params ? [params]: [])] as const;
    }

    
export const useV1VehiclesListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>, TError = unknown>(params?: V1VehiclesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1VehiclesListQueryKey(params);

  const v1VehiclesList =  useV1VehiclesListHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>> = ({ signal }) => v1VehiclesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1VehiclesListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>>
export type V1VehiclesListQueryError = unknown

export const useV1VehiclesList = <TData = Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>, TError = unknown>(
 params?: V1VehiclesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesListHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1VehiclesListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useV1VehiclesCreateHook = () => {
        const v1VehiclesCreate = useCustomInstance<VehicleList>();

        return useCallback((
    vehicleListRequest: VehicleListRequest,
 ) => {
        return v1VehiclesCreate(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicleListRequest
    },
          );
        }, [v1VehiclesCreate])
      }
    


export const useV1VehiclesCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>, TError,{data: VehicleListRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>, TError,{data: VehicleListRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1VehiclesCreate =  useV1VehiclesCreateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>, {data: VehicleListRequest}> = (props) => {
          const {data} = props ?? {};

          return  v1VehiclesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1VehiclesCreateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>>
    export type V1VehiclesCreateMutationBody = VehicleListRequest
    export type V1VehiclesCreateMutationError = unknown

    export const useV1VehiclesCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>, TError,{data: VehicleListRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1VehiclesCreateHook>>>,
        TError,
        {data: VehicleListRequest},
        TContext
      > => {

      const mutationOptions = useV1VehiclesCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1VehiclesRetrieveHook = () => {
        const v1VehiclesRetrieve = useCustomInstance<VehicleDetails>();

        return useCallback((
    uuid: string,
 signal?: AbortSignal
) => {
        return v1VehiclesRetrieve(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/${uuid}/`, method: 'GET', signal
    },
          );
        }, [v1VehiclesRetrieve])
      }
    

export const getV1VehiclesRetrieveQueryKey = (uuid: string,) => {
    return [`http://0.0.0.0:8000/api/v1/vehicles/${uuid}/`] as const;
    }

    
export const useV1VehiclesRetrieveQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>, TError = unknown>(uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getV1VehiclesRetrieveQueryKey(uuid);

  const v1VehiclesRetrieve =  useV1VehiclesRetrieveHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>> = ({ signal }) => v1VehiclesRetrieve(uuid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>, TError, TData> & { queryKey: QueryKey }
}

export type V1VehiclesRetrieveQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>>
export type V1VehiclesRetrieveQueryError = unknown

export const useV1VehiclesRetrieve = <TData = Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>, TError = unknown>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesRetrieveHook>>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = useV1VehiclesRetrieveQueryOptions(uuid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useV1VehiclesUpdateHook = () => {
        const v1VehiclesUpdate = useCustomInstance<VehicleDetails>();

        return useCallback((
    uuid: string,
    vehicleDetailsRequest: VehicleDetailsRequest,
 ) => {
        return v1VehiclesUpdate(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/${uuid}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vehicleDetailsRequest
    },
          );
        }, [v1VehiclesUpdate])
      }
    


export const useV1VehiclesUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>, TError,{uuid: string;data: VehicleDetailsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>, TError,{uuid: string;data: VehicleDetailsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1VehiclesUpdate =  useV1VehiclesUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>, {uuid: string;data: VehicleDetailsRequest}> = (props) => {
          const {uuid,data} = props ?? {};

          return  v1VehiclesUpdate(uuid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1VehiclesUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>>
    export type V1VehiclesUpdateMutationBody = VehicleDetailsRequest
    export type V1VehiclesUpdateMutationError = unknown

    export const useV1VehiclesUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>, TError,{uuid: string;data: VehicleDetailsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1VehiclesUpdateHook>>>,
        TError,
        {uuid: string;data: VehicleDetailsRequest},
        TContext
      > => {

      const mutationOptions = useV1VehiclesUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1VehiclesPartialUpdateHook = () => {
        const v1VehiclesPartialUpdate = useCustomInstance<VehicleDetails>();

        return useCallback((
    uuid: string,
    patchedVehicleDetailsRequest: PatchedVehicleDetailsRequest,
 ) => {
        return v1VehiclesPartialUpdate(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/${uuid}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedVehicleDetailsRequest
    },
          );
        }, [v1VehiclesPartialUpdate])
      }
    


export const useV1VehiclesPartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>, TError,{uuid: string;data: PatchedVehicleDetailsRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>, TError,{uuid: string;data: PatchedVehicleDetailsRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1VehiclesPartialUpdate =  useV1VehiclesPartialUpdateHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>, {uuid: string;data: PatchedVehicleDetailsRequest}> = (props) => {
          const {uuid,data} = props ?? {};

          return  v1VehiclesPartialUpdate(uuid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1VehiclesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>>
    export type V1VehiclesPartialUpdateMutationBody = PatchedVehicleDetailsRequest
    export type V1VehiclesPartialUpdateMutationError = unknown

    export const useV1VehiclesPartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>, TError,{uuid: string;data: PatchedVehicleDetailsRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1VehiclesPartialUpdateHook>>>,
        TError,
        {uuid: string;data: PatchedVehicleDetailsRequest},
        TContext
      > => {

      const mutationOptions = useV1VehiclesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const useV1VehiclesDestroyHook = () => {
        const v1VehiclesDestroy = useCustomInstance<void>();

        return useCallback((
    uuid: string,
 ) => {
        return v1VehiclesDestroy(
          {url: `http://0.0.0.0:8000/api/v1/vehicles/${uuid}/`, method: 'DELETE'
    },
          );
        }, [v1VehiclesDestroy])
      }
    


export const useV1VehiclesDestroyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>, TError,{uuid: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      const v1VehiclesDestroy =  useV1VehiclesDestroyHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  v1VehiclesDestroy(uuid,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type V1VehiclesDestroyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>>
    
    export type V1VehiclesDestroyMutationError = unknown

    export const useV1VehiclesDestroy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>, TError,{uuid: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<ReturnType<typeof useV1VehiclesDestroyHook>>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = useV1VehiclesDestroyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    